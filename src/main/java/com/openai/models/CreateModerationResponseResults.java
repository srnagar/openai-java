// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateModerationResponseResults model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateModerationResponseResults implements JsonSerializable<CreateModerationResponseResults> {
    /*
     * Whether any of the below categories are flagged.
     */
    @Metadata(generated = true)
    private final boolean flagged;

    /*
     * A list of the categories, and whether they are flagged or not.
     */
    @Metadata(generated = true)
    private final CreateModerationResponseCategories categories;

    /*
     * A list of the categories along with their scores as predicted by model.
     */
    @Metadata(generated = true)
    private final CreateModerationResponseCategoryScores categoryScores;

    /**
     * Creates an instance of CreateModerationResponseResults class.
     * 
     * @param flagged the flagged value to set.
     * @param categories the categories value to set.
     * @param categoryScores the categoryScores value to set.
     */
    @Metadata(generated = true)
    private CreateModerationResponseResults(boolean flagged, CreateModerationResponseCategories categories,
        CreateModerationResponseCategoryScores categoryScores) {
        this.flagged = flagged;
        this.categories = categories;
        this.categoryScores = categoryScores;
    }

    /**
     * Get the flagged property: Whether any of the below categories are flagged.
     * 
     * @return the flagged value.
     */
    @Metadata(generated = true)
    public boolean isFlagged() {
        return this.flagged;
    }

    /**
     * Get the categories property: A list of the categories, and whether they are flagged or not.
     * 
     * @return the categories value.
     */
    @Metadata(generated = true)
    public CreateModerationResponseCategories getCategories() {
        return this.categories;
    }

    /**
     * Get the categoryScores property: A list of the categories along with their scores as predicted by model.
     * 
     * @return the categoryScores value.
     */
    @Metadata(generated = true)
    public CreateModerationResponseCategoryScores getCategoryScores() {
        return this.categoryScores;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("flagged", this.flagged);
        jsonWriter.writeJsonField("categories", this.categories);
        jsonWriter.writeJsonField("category_scores", this.categoryScores);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateModerationResponseResults from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateModerationResponseResults if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateModerationResponseResults.
     */
    @Metadata(generated = true)
    public static CreateModerationResponseResults fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean flagged = false;
            CreateModerationResponseCategories categories = null;
            CreateModerationResponseCategoryScores categoryScores = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("flagged".equals(fieldName)) {
                    flagged = reader.getBoolean();
                } else if ("categories".equals(fieldName)) {
                    categories = CreateModerationResponseCategories.fromJson(reader);
                } else if ("category_scores".equals(fieldName)) {
                    categoryScores = CreateModerationResponseCategoryScores.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateModerationResponseResults(flagged, categories, categoryScores);
        });
    }
}
