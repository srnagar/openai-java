// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateChatCompletionResponseChoices model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateChatCompletionResponseChoices
    implements JsonSerializable<CreateChatCompletionResponseChoices> {
    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a
     * natural stop point or a provided stop sequence, `length` if the maximum number of tokens
     * specified in the request was reached, `content_filter` if content was omitted due to a flag
     * from our content filters, `tool_calls` if the model called a tool, or `function_call`
     * (deprecated) if the model called a function.
     */
    @Metadata(generated = true)
    private final CreateChatCompletionResponseFinishReason finishReason;

    /*
     * The index of the choice in the list of choices.
     */
    @Metadata(generated = true)
    private final long index;

    /*
     * The message property.
     */
    @Metadata(generated = true)
    private final ChatCompletionResponseMessage message;

    /*
     * Log probability information for the choice.
     */
    @Metadata(generated = true)
    private final CreateChatCompletionResponseLogprobs logprobs;

    /**
     * Creates an instance of CreateChatCompletionResponseChoices class.
     * 
     * @param finishReason the finishReason value to set.
     * @param index the index value to set.
     * @param message the message value to set.
     * @param logprobs the logprobs value to set.
     */
    @Metadata(generated = true)
    private CreateChatCompletionResponseChoices(CreateChatCompletionResponseFinishReason finishReason, long index,
        ChatCompletionResponseMessage message, CreateChatCompletionResponseLogprobs logprobs) {
        this.finishReason = finishReason;
        this.index = index;
        this.message = message;
        this.logprobs = logprobs;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a
     * natural stop point or a provided stop sequence, `length` if the maximum number of tokens
     * specified in the request was reached, `content_filter` if content was omitted due to a flag
     * from our content filters, `tool_calls` if the model called a tool, or `function_call`
     * (deprecated) if the model called a function.
     * 
     * @return the finishReason value.
     */
    @Metadata(generated = true)
    public CreateChatCompletionResponseFinishReason getFinishReason() {
        return this.finishReason;
    }

    /**
     * Get the index property: The index of the choice in the list of choices.
     * 
     * @return the index value.
     */
    @Metadata(generated = true)
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    @Metadata(generated = true)
    public ChatCompletionResponseMessage getMessage() {
        return this.message;
    }

    /**
     * Get the logprobs property: Log probability information for the choice.
     * 
     * @return the logprobs value.
     */
    @Metadata(generated = true)
    public CreateChatCompletionResponseLogprobs getLogprobs() {
        return this.logprobs;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("finish_reason", this.finishReason == null ? null : this.finishReason.toString());
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeJsonField("message", this.message);
        jsonWriter.writeJsonField("logprobs", this.logprobs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatCompletionResponseChoices from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatCompletionResponseChoices if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatCompletionResponseChoices.
     */
    @Metadata(generated = true)
    public static CreateChatCompletionResponseChoices fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateChatCompletionResponseFinishReason finishReason = null;
            long index = 0L;
            ChatCompletionResponseMessage message = null;
            CreateChatCompletionResponseLogprobs logprobs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("finish_reason".equals(fieldName)) {
                    finishReason = CreateChatCompletionResponseFinishReason.fromString(reader.getString());
                } else if ("index".equals(fieldName)) {
                    index = reader.getLong();
                } else if ("message".equals(fieldName)) {
                    message = ChatCompletionResponseMessage.fromJson(reader);
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = CreateChatCompletionResponseLogprobs.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateChatCompletionResponseChoices(finishReason, index, message, logprobs);
        });
    }
}
