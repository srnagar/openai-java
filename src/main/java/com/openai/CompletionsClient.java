// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.CompletionsImpl;
import com.openai.models.CreateChatCompletionRequest;
import com.openai.models.CreateCompletionRequest;
import com.openai.models.CreateCompletionResponse;
import com.openai.models.CreateCompletionResponseListener;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.models.ServerSentEvent;
import io.clientcore.core.http.models.ServerSentEventListener;
import io.clientcore.core.util.binarydata.BinaryData;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.function.Consumer;

/**
 * Initializes a new instance of the synchronous OpenAIClient type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class CompletionsClient {
    @Metadata(generated = true)
    private final CompletionsImpl serviceClient;

    /**
     * Initializes an instance of CompletionsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    CompletionsClient(CompletionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(gpt-3.5-turbo-instruct/davinci-002/babbage-002) (Required)
     *     prompt: BinaryData (Required)
     *     best_of: Long (Optional)
     *     echo: Boolean (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: long (Required)
     *     }
     *     logprobs: Long (Optional)
     *     max_tokens: Long (Optional)
     *     n: Long (Optional)
     *     presence_penalty: Double (Optional)
     *     seed: Long (Optional)
     *     stop: BinaryData (Optional)
     *     stream: Boolean (Optional)
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * @param createCompletionRequest The createCompletionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a completion response from the API.
     */
    @Metadata(generated = true)
    public Response<CreateCompletionResponse> createCompletionWithResponse(BinaryData createCompletionRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createCompletionWithResponse(createCompletionRequest, requestOptions);
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * 
     * @param createCompletionRequest The createCompletionRequest parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a completion response from the API.
     */
    @Metadata(generated = true)
    public CreateCompletionResponse createCompletion(CreateCompletionRequest createCompletionRequest) {
        // Generated convenience method for createCompletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCompletionWithResponse(BinaryData.fromObject(createCompletionRequest), requestOptions).getValue();
    }


    public void createCompletionStream(CreateCompletionRequest createCompletionRequest, Consumer<CreateCompletionResponse> eventConsumer) {
        createCompletionStream(createCompletionRequest, (CreateCompletionResponseListener) responseEvent -> eventConsumer.accept(responseEvent));
    }

    public void createCompletionStream(CreateCompletionRequest createCompletionRequest, CreateCompletionResponseListener listener) {
        RequestOptions requestOptions = new RequestOptions()
                .addRequestCallback(httpRequest -> httpRequest.setServerSentEventListener(new CompletionEventListener(listener)));
        createCompletionWithResponse(BinaryData.fromObject(createCompletionRequest), requestOptions);
    }

    private static class CompletionEventListener implements ServerSentEventListener {
        private final CreateCompletionResponseListener listener;

        CompletionEventListener(CreateCompletionResponseListener listener) {
            this.listener = listener;
        }

        @Override
        public void onEvent(ServerSentEvent sse) throws IOException {
            if (sse.getData() != null && !sse.getData().isEmpty() && !sse.getData().get(0).contains("DONE")) {
                CreateCompletionResponse completionResponseEvent = BinaryData.fromBytes(sse.getData().get(0).getBytes(StandardCharsets.UTF_8)).toObject(CreateCompletionResponse.class);
                listener.onEvent(completionResponseEvent);
            }
        }

        @Override
        public void onError(Throwable throwable) {
            listener.onError(throwable);
        }

        @Override
        public void onClose() {
            listener.onClose();
        }
    }
}
