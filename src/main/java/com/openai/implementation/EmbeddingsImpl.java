// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.openai.models.CreateEmbeddingResponse;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * An instance of this class provides access to all the operations defined in Embeddings.
 */
public final class EmbeddingsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EmbeddingsService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of EmbeddingsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EmbeddingsImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(EmbeddingsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientEmbeddings to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "OpenAIClientEmbeddin", host = "https://api.openai.com/v1")
    public interface EmbeddingsService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/embeddings", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<CreateEmbeddingResponse> createEmbeddingSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData embedding, RequestOptions requestOptions);
    }

    /**
     * Creates an embedding vector representing the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     input: BinaryData (Required)
     *     model: String(text-embedding-ada-002/text-embedding-3-small/text-embedding-3-large) (Required)
     *     encoding_format: String(float/base64) (Optional)
     *     dimensions: Long (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * @param embedding The embedding parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<CreateEmbeddingResponse> createEmbeddingWithResponse(BinaryData embedding,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createEmbeddingSync(accept, embedding, requestOptions);
    }
}
